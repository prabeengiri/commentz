<?php
/**
 * @file
 */

// Include theme definiation and preprocess
module_load_include('inc', 'commentz', 'theme/theme');

/**
 * Implements hook_menu().
 */
function commentz_menu() {
  $items['commentz/%/delete'] = array(
    'page callback' => 'commentz_delete',
    'page arguments' => array(1),
    'access callback' => TRUE,
    //'access arguments' => array('delete own comment'),
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
    'file' => 'commentz.pages.inc',
  );
  $items['commentz/%/reply'] = array(
    'page callback' => 'commentz_reply',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'access arguments' => array('access comments'),
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
    'file' => 'commentz.pages.inc',
  );
  return $items;
}

/**
 * Implement hook_entity_info().
 */
function commentz_entity_info() {
  $return = array(
    'commentz' => array(
      'label' => t('Commentz'),
      'base table' => 'commentz',
      // Use the default label() and uri() functions
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'fieldable' => FALSE,
      'controller class' => 'EntityAPIController',
      'entity keys' => array(
        'id' => 'cid',
      ),
      'bundles' => array(),
      'static cache' => FALSE,
    ),
  );
  return $return;
}

function commentz_node_view($node) {
  $node->content['commentz'] = commentz_node_additions($node);
}

function commentz_node_additions($node) {
  $additions = array();
  // @todo correct permissions
  if (1==1) {
    if ($commentz_all = commentz_load_all($node->nid)) {
      $build = commentz_view_multiple($commentz_all['data'], $node);
      $additions['commentzs'] = $build;
      $additions['commentzs']['#count'] = $commentz_all['count'];
    }
  }

  if (user_access('post commentz') || 1==1) {
    $build = drupal_get_form('commentz_form', $node);
    $additions['commentz_form'] = $build;
  }
  $additions += array(
    '#theme' => 'commentz_wrapper',
    '#node' => $node,
    'commentzs' => array(),
    'commentz_form' => array(),
    '#attached' => array('css' => array(drupal_get_path('module', 'commentz') . '/commentz.css'))
  );
  $additions['commentz_form'] = $build;

  return $additions;
}

/**
 * Comment Form.
 */
function commentz_form($form, $form_state, $node) {
  $form['body'] = array(
  	'#type' => 'textarea',
    '#title' => "",
    '#rows' => 2,
    '#attributes' => array('placeholder' => t('Enter comment'))
  );

  $form['nid'] = array(
  	'#type' => 'value',
    '#value' => $node->nid,
  );
  $form['pid'] = array(
    '#type' => 'value',
    '#value' => 0,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => "Comment",
    '#ajax' => array(
      'callback' => 'commentz_submit',
      'wrapper' => 'comment-wrapper',
      'method' => 'append',
      'effect' => 'fade',
    ),
    '#attributes' => array('class' => array('btn-primary')),
  );
  return $form;
}

function commentz_prepare_submit($form, &$form_state, $cid = NULL) {
  global $user, $language;

  $commentz = new stdClass;

  $commentz->uid = $user->uid;
  $commentz->name = $user->name;
  $commentz->mail = $user->mail;
  // @todo set proper language
  $commentz->language = LANGUAGE_NONE;
  $commentz->changed = REQUEST_TIME;

  if ($cid) {
    $commentz->cid = $cid;
  } else {
    $commentz->created = REQUEST_TIME;
  }

  if ($pid = $form_state['values']['pid'])
    $commentz->pid = $pid;
  else
    $commentz->pid = 0;

  $commentz->nid = $form_state['values']['nid'];
  $commentz->body = $form_state['values']['body'];
  return $commentz;
}

function commentz_form_validate($form, &$form_state) {
  if (empty($form_state['values']['body'])) {
    form_set_error('body', '');
  }
}

function commentz_form_submit($form, &$form_state) {
  $commentz = commentz_prepare_submit($form, $form_state);
  commentz_save($commentz);
}

function commentz_save($commentz) {
  $entity = entity_create('commentz', (array) $commentz);
  $entity_wrapper = entity_metadata_wrapper('commentz', $entity);
  $entity_wrapper->save();
}

function commentz_load_all($nid) {
  $commentz_all = entity_load('commentz', FALSE, array('nid' => $nid));
  $nested_commentzs = array('data' => array(), 'count' => NULL);
  $commentz_count = 0;
  foreach($commentz_all as $cid => $commentz) {
    if ($commentz->pid == 0) {
      if (!isset($nested_commentzs['data'][$commentz->cid])) {
        $nested_commentzs['data'][$commentz->cid]['responses'] = array();
      }
      $nested_commentzs['data'][$commentz->cid] += (array)$commentz;
      $nested_commentzs['count'] = ++ $commentz_count;
    } else {
      $nested_commentzs['data'][$commentz->pid]['responses'][$commentz->cid] = (array)$commentz;
    }
  }
  return $nested_commentzs;
}

function commentz_view($commentz, $node) {
  $build = array(
    '#theme' => 'commentz',
    '#comment' => $commentz,
    '#node' => $node,
    'links' => array(
      '#theme' => 'links',
      '#links' => commentz_links($commentz, $node),
      '#attributes' => array('class' => array('links', 'inline')),
    ),
  );
  if (!empty($commentz['responses'])) {
    $build['commentz_responses'] = commentz_response_view_multiple($commentz['responses']);
  }
  return $build;
}

function commentz_view_multiple($commentzs, $node) {
  $build = array();
  foreach($commentzs as $comment_id => $commentz) {
    $build[$commentz['cid']] = commentz_view($commentz, $node);
  }
  return $build;
}

function commentz_response_view_multiple($commentz_responses) {

  $build = array();
  foreach($commentz_responses as $commentz_id => $response) {
    $build[$response['cid']] = commentz_response_view($response);
  }
  return $build;
}

function commentz_response_view($response) {
  $build = array(
    '#theme' => 'commentz_response',
    '#response' => $response,
  );
  return $build;
}

function commentz_get_avatar() {
  // @todo get the avatar by user id.
  global $user;
  $variables = array(
    'style_name' => 'commentz_avatar',
    'path' => file_load($user->picture)->uri,
    'alt' => $user->name,
    'width' => 36,
    'height' => 36,
  );
  return theme_image_style($variables);
}

/**
 * Helper function, build links for an individual comment.
 *
 * Adds reply, edit, delete etc. depending on the current user permissions.
 *
 * @param $comment
 *   The comment object.
 * @param $node
 *   The node the comment is attached to.
 * @return
 *   A structured array of links.
 */
function commentz_links($commentz, $node) {
  $links = array();
  // @todo add right permissions.
  if (1==1 || user_access('administer comments') && user_access('post comments')) {
    $links['comment-delete'] = array(
      'title' => t('Delete'),
      'href' => "commentz/" . $commentz['cid'] . "/delete",
      'html' => TRUE,
    );
    $links['comment-edit'] = array(
      'title' => t('Edit'),
      'href' => "commentz/" . $commentz['cid'] . "/edit",
      'html' => TRUE,
    );
  }
  return $links;
}

function commentz_load($cid) {
  $commentz = entity_load('commentz', array($cid));
  return reset($commentz);
}

function commentz_delete($cid) {
  return db_delete('commentz')
  ->condition('cid', $cid, '=')
  ->execute();
}

/**
 * Form builder; Builds the confirmation form for deleting a single comment.
 *
 * @ingroup forms
 * @see comment_confirm_delete_submit()
 */
function commentz_confirm_delete($form, &$form_state, $commentz) {
  $form['#comment'] = $commentz;
  // Always provide entity id in the same form key as in the entity edit form.
  $form['cid'] = array('#type' => 'value', '#value' => $commentz->cid);
  return confirm_form(
      $form,
      t('Are you sure you want to delete the comment %title?', array('%title' => $comment->body)),
      'node/' . $comment->nid,
      t('Any replies to this comment will be lost. This action cannot be undone.'),
      t('Delete'),
      t('Cancel'),
      'comment_confirm_delete');
}

function _debug($data, $die = true) {
  echo "<pre>";
  print_r($data);
  echo "</pre>";
  if ($die)
    die();
}